// <auto-generated />
using System;
using Labb_1___MVC_and_Razor.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Labb_1___MVC_and_Razor.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Labb_1___MVC_and_Razor.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BookCurrentlyAvailableForRent")
                        .HasColumnType("bit");

                    b.Property<string>("BookImageThmbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookPublishedYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            BookAuthor = "Frank Herbert",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\Dune.webp",
                            BookPublishedYear = "1965",
                            BookTitle = "Dune"
                        },
                        new
                        {
                            BookID = 2,
                            BookAuthor = "Michael Crichton",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\Jurassic Park.webp",
                            BookPublishedYear = "1990",
                            BookTitle = "Jurassic Park"
                        },
                        new
                        {
                            BookID = 3,
                            BookAuthor = "Robert Louis Stevenson",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\Treasure Island.jpg",
                            BookPublishedYear = "1883",
                            BookTitle = "Treasure Island"
                        },
                        new
                        {
                            BookID = 4,
                            BookAuthor = "Jules Verne",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\Twenty Thousand Leagues Under the Sea.jpg",
                            BookPublishedYear = "1870",
                            BookTitle = "Twenty Thousand Leagues Under the Sea"
                        },
                        new
                        {
                            BookID = 5,
                            BookAuthor = "Mary Shelley",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\Frankenstein.jpg",
                            BookPublishedYear = "1818",
                            BookTitle = "Frankenstein"
                        },
                        new
                        {
                            BookID = 6,
                            BookAuthor = "Leo Tolstoy",
                            BookCurrentlyAvailableForRent = true,
                            BookImageThmbnailUrl = "\\images\\War and peace.jpg",
                            BookPublishedYear = "1869",
                            BookTitle = "War and Peace"
                        });
                });

            modelBuilder.Entity("Labb_1___MVC_and_Razor.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerAge")
                        .HasColumnType("int");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            CustomerAge = 25,
                            CustomerFirstName = "Daniel",
                            CustomerGender = "Male",
                            CustomerLastName = "Gyrén"
                        },
                        new
                        {
                            CustomerID = 2,
                            CustomerAge = 55,
                            CustomerFirstName = "Paul",
                            CustomerGender = "Male",
                            CustomerLastName = "Foster"
                        },
                        new
                        {
                            CustomerID = 3,
                            CustomerAge = 31,
                            CustomerFirstName = "Gareth",
                            CustomerGender = "Male",
                            CustomerLastName = "Archer"
                        },
                        new
                        {
                            CustomerID = 4,
                            CustomerAge = 20,
                            CustomerFirstName = "Jordan",
                            CustomerGender = "Male",
                            CustomerLastName = "Humble"
                        },
                        new
                        {
                            CustomerID = 5,
                            CustomerAge = 35,
                            CustomerFirstName = "James",
                            CustomerGender = "Male",
                            CustomerLastName = "Johnson"
                        },
                        new
                        {
                            CustomerID = 6,
                            CustomerAge = 35,
                            CustomerFirstName = "Janet",
                            CustomerGender = "Female",
                            CustomerLastName = "Johnson"
                        },
                        new
                        {
                            CustomerID = 7,
                            CustomerAge = 41,
                            CustomerFirstName = "Morgan",
                            CustomerGender = "Male",
                            CustomerLastName = "Karlsson"
                        },
                        new
                        {
                            CustomerID = 8,
                            CustomerAge = 52,
                            CustomerFirstName = "Ola-Conny",
                            CustomerGender = "Male",
                            CustomerLastName = "Wallgren"
                        });
                });

            modelBuilder.Entity("Labb_1___MVC_and_Razor.Models.LibraryLoan", b =>
                {
                    b.Property<int>("LibraryLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfLoan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDateToReturn")
                        .HasColumnType("datetime2");

                    b.HasKey("LibraryLoanID");

                    b.HasIndex("BookID");

                    b.HasIndex("CustomerID");

                    b.ToTable("LibraryLoans");

                    b.HasData(
                        new
                        {
                            LibraryLoanID = 1,
                            BookID = 1,
                            CustomerID = 1,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 178, DateTimeKind.Local).AddTicks(1919),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(6601)
                        },
                        new
                        {
                            LibraryLoanID = 2,
                            BookID = 2,
                            CustomerID = 1,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7482),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7504)
                        },
                        new
                        {
                            LibraryLoanID = 3,
                            BookID = 3,
                            CustomerID = 1,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7547),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7551)
                        },
                        new
                        {
                            LibraryLoanID = 4,
                            BookID = 4,
                            CustomerID = 2,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7572),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7575)
                        },
                        new
                        {
                            LibraryLoanID = 5,
                            BookID = 5,
                            CustomerID = 2,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7593),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7596)
                        },
                        new
                        {
                            LibraryLoanID = 6,
                            BookID = 6,
                            CustomerID = 2,
                            DateOfLoan = new DateTime(2022, 9, 30, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7621),
                            DateOfReturn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LastDateToReturn = new DateTime(2022, 11, 14, 2, 54, 0, 180, DateTimeKind.Local).AddTicks(7624)
                        });
                });

            modelBuilder.Entity("Labb_1___MVC_and_Razor.Models.LibraryLoan", b =>
                {
                    b.HasOne("Labb_1___MVC_and_Razor.Models.Book", "Book")
                        .WithMany("LibraryLoans")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labb_1___MVC_and_Razor.Models.Customer", "Customer")
                        .WithMany("LibraryLoans")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
